#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>

class Student {
public:
    Student(std::string name, int age, std::string id) 
        : name(name), age(age), id(id) {}

    std::string getName() const { return name; }
    int getAge() const { return age; }
    std::string getId() const { return id; }

    void display() const {
        std::cout << "Name: " << name << ", Age: " << age << ", ID: " << id << std::endl;
    }

private:
    std::string name;
    int age;
    std::string id;
};

class StudentDatabase {
public:
    void addStudent(const Student& student) {
        students.push_back(student);
        std::cout << "Student added successfully.\n";
    }

    void removeStudent(const std::string& id) {
        auto it = std::remove_if(students.begin(), students.end(),
                                 [&id](const Student& student) {
                                     return student.getId() == id;
                                 });
        if (it != students.end()) {
            students.erase(it, students.end());
            std::cout << "Student removed successfully.\n";
        } else {
            std::cout << "Student not found.\n";
        }
    }

    void findStudent(const std::string& id) const {
        auto it = std::find_if(students.begin(), students.end(),
                               [&id](const Student& student) {
                                   return student.getId() == id;
                               });
        if (it != students.end()) {
            it->display();
        } else {
            std::cout << "Student not found.\n";
        }
    }

    void displayAllStudents() const {
        if (students.empty()) {
            std::cout << "No students in the database.\n";
        } else {
            for (const auto& student : students) {
                student.display();
            }
        }
    }

    void saveToFile(const std::string& filename) const {
        std::ofstream file(filename);
        if (file.is_open()) {
            for (const auto& student : students) {
                file << student.getName() << "\n"
                     << student.getAge() << "\n"
                     << student.getId() << "\n";
            }
            file.close();
            std::cout << "Data saved to " << filename << std::endl;
        } else {
            std::cout << "Failed to open file for writing.\n";
        }
    }

    void loadFromFile(const std::string& filename) {
        std::ifstream file(filename);
        if (file.is_open()) {
            students.clear();
            std::string name;
            int age;
            std::string id;
            while (std::getline(file, name)) {
                file >> age;
                file.ignore(); // Игнорировать оставшийся перевод строки
                std::getline(file, id);
                students.emplace_back(name, age, id);
            }
            file.close();
            std::cout << "Data loaded from " << filename << std::endl;
        } else {
            std::cout << "Failed to open file for reading.\n";
        }
    }

private:
    std::vector<Student> students;
};

int main() {
    StudentDatabase db;
    int choice;

    do {
        std::cout << "\nStudent Database Menu\n";
        std::cout << "1. Add Student\n";
        std::cout << "2. Remove Student\n";
        std::cout << "3. Find Student\n";
        std::cout << "4. Display All Students\n";
        std::cout << "5. Save to File\n";
        std::cout << "6. Load from File\n";
        std::cout << "0. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;
        std::cin.ignore(); // Игнорировать перевод строки после выбора

        switch (choice) {
            case 1: {
                std::string name, id;
                int age;
                std::cout << "Enter name: ";
                std::getline(std::cin, name);
                std::cout << "Enter age: ";
                std::cin >> age;
                std::cin.ignore();
                std::cout << "Enter ID: ";
                std::getline(std::cin, id);
                db.addStudent(Student(name, age, id));
                break;
            }
            case 2: {
                std::string id;
                std::cout << "Enter student ID to remove: ";
                std::getline(std::cin, id);
                db.removeStudent(id);
                break;
            }
            case 3: {
                std::string id;
                std::cout << "Enter student ID to find: ";
                std::getline(std::cin, id);
                db.findStudent(id);
                break;
            }
            case 4:
                db.displayAllStudents();
                break;
            case 5: {
                std::string filename;
                std::cout << "Enter filename to save: ";
                std::getline(std::cin, filename);
                db.saveToFile(filename);
                break;
            }
            case 6: {
                std::string filename;
                std::cout << "Enter filename to load: ";
                std::getline(std::cin, filename);
                db.loadFromFile(filename);
                break;
            }
            case 0:
                std::cout << "Exiting...\n";
                break;
            default:
                std::cout << "Invalid choice. Please try again.\n";
                break;
        }
    } while (choice != 0);

    return 0;
}
